<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;data&apos; from expression &apos;dataOfPerson.data()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;data&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;dataOfPerson.data()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;data&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="data" replace="true" selection="3893 20" stamp="1677778411036" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;person&apos; from expression &apos;new Person()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;person&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;new Person()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;person&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="person" replace="true" selection="3905 0" stamp="1677778459944" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;intPredicate&apos; from expression &apos;number -&gt; number % 2 == 0&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;intPredicate&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;number -&gt; number % 2 == 0&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;intPredicate&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="intPredicate" replace="true" selection="2388 25" stamp="1677778508278" varType="false" version="1.0"/>&#x0A;&#x0A;&#x0A;<refactoring comment="Extract local variable &apos;orElse&apos; from expression &apos;dataOfPerson.data().stream().mapToDouble(p -&gt; p.getAge()).average().orElse(0)&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;orElse&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;dataOfPerson.data().stream().mapToDouble(p -&gt; p.getAge()).average().orElse(0)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;orElse&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="orElse" replace="true" selection="4056 0" stamp="1677779431888" varType="false" version="1.0"/>&#x0A;&#x0A;<refactoring comment="Extract local variable &apos;toDoubleFunction&apos; from expression &apos;t -&gt; t&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;toDoubleFunction&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;t -&gt; t&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;toDoubleFunction&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="toDoubleFunction" replace="true" selection="4188 6" stamp="1677779831247" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;average&apos; from expression &apos;tels.stream().mapToDouble(toDoubleFunction).average()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;average&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;tels.stream().mapToDouble(toDoubleFunction).average()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;average&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="average" replace="true" selection="4454 0" stamp="1677780053376" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;average&apos; from expression &apos;tels.stream().mapToDouble(toDoubleFunction).average().orElse(0)&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;average&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;tels.stream().mapToDouble(toDoubleFunction).average().orElse(0)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;average&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="average" replace="true" selection="4497 0" stamp="1677780177450" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;filter&apos; from expression &apos;Arrays.stream(table).filter(index -&gt; index &gt; 5)&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;filter&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(table).filter(index -&gt; index &gt; 5)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;filter&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="filter" replace="true" selection="4738 0" stamp="1677781279685" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;asInt&apos; from expression &apos;Arrays.stream(table).filter(index -&gt; index &gt; 5).findAny().getAsInt()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;asInt&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(table).filter(index -&gt; index &gt; 5).findAny().getAsInt()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;asInt&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="asInt" replace="true" selection="4759 0" stamp="1677781486535" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;findAny&apos; from expression &apos;Arrays.stream(table).filter(index -&gt; index &lt; 5).findAny()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;findAny&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(table).filter(index -&gt; index &lt; 5).findAny()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;findAny&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="findAny" replace="true" selection="4751 0" stamp="1677781707006" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sum&apos; from expression &apos;dataOfPerson.data().stream().mapToDouble(p -&gt; p.getAge()).sum()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;sum&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;dataOfPerson.data().stream().mapToDouble(p -&gt; p.getAge()).sum()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sum&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="sum" replace="true" selection="4969 0" stamp="1677790958992" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;count&apos; from expression &apos;dataOfPerson.data().stream().count()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;count&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;dataOfPerson.data().stream().count()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;count&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="count" replace="true" selection="5071 0" stamp="1677791296699" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;asLong&apos; from expression &apos;dataOfPerson.data().stream().mapToLong(p -&gt; p.getAge()).min().getAsLong()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;asLong&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;dataOfPerson.data().stream().mapToLong(p -&gt; p.getAge()).min().getAsLong()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;asLong&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="asLong" replace="true" selection="5231 0" stamp="1677791637856" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;toLongFunction&apos; from expression &apos;p -&gt; p.getAge()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;toLongFunction&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;p -&gt; p.getAge()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;toLongFunction&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="toLongFunction" replace="true" selection="5211 15" stamp="1677791730589" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;summaryStatistics&apos; from expression &apos;numbers.stream().mapToDouble(number -&gt; number).summaryStatistics()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;summaryStatistics&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;numbers.stream().mapToDouble(number -&gt; number).summaryStatistics()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;summaryStatistics&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="summaryStatistics" replace="true" selection="5438 0" stamp="1677792330761" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;dataOfPerson.data().stream().collect(Collectors.groupingBy(p -&gt; p.getLastName()))&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;dataOfPerson.data().stream().collect(Collectors.groupingBy(p -&gt; p.getLastName()))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="collect" replace="true" selection="6322 0" stamp="1677793562785" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;dataOfPerson.data().stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;dataOfPerson.data().stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="collect" replace="true" selection="6601 108" stamp="1677794884589" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;names.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;names.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="collect" replace="true" selection="6879 0" stamp="1677795692073" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;reduce&apos; from expression &apos;Arrays.stream(table).reduce(0,(a,b) -&gt; a + b)&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;reduce&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(table).reduce(0,(a,b) -&gt; a + b)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;reduce&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="reduce" replace="true" selection="7110 0" stamp="1677801747522" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sum&apos; from expression &apos;Arrays.stream(table).sum()&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;sum&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(table).sum()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sum&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="sum" replace="true" selection="7090 0" stamp="1677801781055" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;reduce2&apos; from expression &apos;Arrays.stream(table).reduce(0,Integer::sum)&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;reduce2&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(table).reduce(0,Integer::sum)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;reduce2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="reduce2" replace="true" selection="7384 0" stamp="1677801997448" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(name).collect(Collectors.toList())&apos;&#x0A;- Original project: &apos;streamAPI&apos;&#x0A;- Variable name: &apos;collect&apos;&#x0A;- Destination method: &apos;streamAPI.Testing.main(...)&apos;&#x0A;- Variable expression: &apos;Arrays.stream(name).collect(Collectors.toList())&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;streamAPI{Testing.java" name="collect" replace="true" selection="7625 0" stamp="1677803510214" varType="false" version="1.0"/>
</session>