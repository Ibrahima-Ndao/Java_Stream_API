package streamAPI;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;



import streamAPI.database.DataOfPerson;
import streamAPI.model.Person;

public class Testing {
	static List<Integer> tels = List.of(12, 3, 5, 6, 78, 78, 1, 1, 3, 3, 12);
	static List<Integer> numbers = new ArrayList<>(Arrays.asList(113, 23, 43, 45, 36, 67, 18)); 
	public static int sous() {
		 int a = 12;
		 int b = 11;
		 int c = a - b;
		return c;
	}
	public static void main(String[] args) {
	//	System.out.println("Ibrahima votre calcul est egale a "+sous());
//		for (Integer n : numbers) {
//			System.out.println(n);
//		}
		//numbers.forEach(System.out::println);
//		numbers.forEach(number -> {
//			System.out.println(number);
//		});
		DataOfPerson dataOfPerson = new DataOfPerson();
		//dataOfPerson.data().forEach(System.out::println); // show the list of all person
		
		// method to show the list of person have 18 or more than 18
		/*
		List<Person> persons = dataOfPerson.data();
		Stream<Person> p =  persons.stream().filter(person -> person.getAge() >= 18);
		p.forEach(i -> {
			System.out.println(i);
		});
		*/
		// method to show the list of person who have 18 or less 18
		/*
		dataOfPerson.data().stream()
		.filter(p -> p.getAge() <= 18)
		.forEach(System.out::println);
		*/
		// method to show the list of person who have 18 or less 18 limit on the two first persons
		//dataOfPerson.data().stream().filter(p -> p.getAge() <= 18).limit(2).forEach(System.out::println);
		
		// method to show the list of person who have 18 or more then 18 limit on the five first persons
		/*
		List<Person> persons = dataOfPerson.data();
		List<Person> p =  persons.stream().filter(person -> person.getAge() >= 18).limit(5).collect(Collectors.toList());
		p.forEach(i -> {
			System.out.println(i);
		});
		*/
		
		// use IntStream with range
		/*
		IntStream.range(0, 10).forEach(i -> {System.out.println(i);});
		System.out.println("----------------------------------------");
		IntStream.rangeClosed(0, 10).forEach(System.out::println);
		*/
		
		// use IntStream with iterate to show twenty number which are even number
		/*
		IntStream.iterate(0, operand -> operand + 1)
		.filter(number -> number % 2 == 0)
		.limit(20)
		.forEach(System.out::println);
		*/
		//compare by max and min and show the value of the list no repeat
		/*
		Integer min = numbers.stream().min(Comparator.naturalOrder()).get();
		System.out.println(min);
		System.out.println("----------");
		
		System.out.println(tels.stream().max(Comparator.naturalOrder()).get());
		System.out.println("----------");
		
		List<Integer> number = tels.stream().distinct().collect(Collectors.toList());
		System.out.println(number);
		// show the value of the list no repeat and sorted
		System.out.println("--------------");
		Set<Integer> distinctnumber = tels.stream().distinct().collect(Collectors.toSet());
		System.out.println(distinctnumber);
		*/
		
		//show the list of person by IntStream
		/*
		IntStream.range(0, dataOfPerson.data().size()).forEach(i -> {
			System.out.println(dataOfPerson.data().get(i));
		});
		*/
		
		// how to use the predicate
		List<Person> persons = dataOfPerson.data();
		Predicate<Person> predicatePerson = person -> person.getAge() < 20;
		persons.stream()
		.filter(predicatePerson).collect(Collectors.toList()).forEach(System.out::println);;
	}
}
